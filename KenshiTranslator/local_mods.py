import json
import re

import sys

def get_base_dir():
    if getattr(sys, 'frozen', False):
        return Path(sys.executable).resolve().parent.parent  # Kenshi
    else:
        return Path(__file__).resolve().parent.parent  # Kenshi


from pathlib import Path
import sys
from pathlib import Path

def get_json_dir():
    if getattr(sys, 'frozen', False):
        return Path(sys.executable).resolve().parent   # KenshiTranslator
    else:
        return Path(__file__).resolve().parent         # KenshiTranslator


ALL_MODS_FILE = "mods_all.json"


def extract_mod_references(mod_file: Path):
    """–ß–∏—Ç–∞–µ—Ç .mod —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å .mod"""
    refs = []
    try:
        with open(mod_file, "rb") as f:
            data = f.read()

        # –∏—â–µ–º –≤—Å–µ –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ .mod
        matches = re.findall(rb"[A-Za-z0-9 \-\+\(\)_',!]+\.mod", data, flags=re.IGNORECASE)
        for m in matches:
            s = m.decode("latin-1", errors="ignore").strip()
            refs.append(s)

        # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        refs = list(dict.fromkeys(refs))

    except Exception as e:
        refs = [f"ERROR: {e}"]

    return refs


def clean_refs(refs):
    """–£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä: ID-—à–Ω–∏–∫–∏, –≤–µ–¥—É—â–∏–µ –∑–∞–ø—è—Ç—ã–µ, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å base,"""
    blacklist = {
        "base,rebirth.mod",
        "rebirth.mod",
        "base,newwworld.mod",
        "newwworld.mod",
        "base,dialogue.mod",
        "dialogue.mod",
    }

    clean = []
    for r in refs:
        s = r.strip()

        # —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â—É—é –∑–∞–ø—è—Ç—É—é
        if s.startswith(","):
            s = s[1:].strip()

        # —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å base, (–µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è —É –æ–±—ã—á–Ω–æ–≥–æ –º–æ–¥–∞)
        if s.lower().startswith("base,"):
            s = s[5:].strip()

        # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —á–∏—Å–ª–∞ –∏ –¥–µ—Ñ–∏—Å–∞ (5008195-Sailback.mod)
        if re.match(r"^\d+-", s):
            continue

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .mod
        if not s.lower().endswith(".mod"):
            continue

        # —É–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—ã (–∏–∑ blacklist)
        if s.lower() in blacklist:
            continue

        clean.append(s)
    return clean


def main():
    # üìÇ –∏—â–µ–º Kenshi/mods (–æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ KenshiTranslator)
    base = get_base_dir()
    mods_dir = base / "mods"
    print(f"[DEBUG] –ò—â—É –º–æ–¥—ã –≤ {mods_dir}")

    all_json = get_json_dir() / ALL_MODS_FILE
    if all_json.exists():
        with open(all_json, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"mods": []}

    mods_dict = {m["name"]: m for m in data["mods"]}

    if not mods_dir.exists():
        print("[DEBUG] –ü–∞–ø–∫–∞ mods –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    found_any = False
    for mod_file in mods_dir.rglob("*.mod"):
        found_any = True
        name = mod_file.stem
        raw_deps = extract_mod_references(mod_file)
        deps = clean_refs(raw_deps)

        print(f"[LOCAL] {name}: {len(deps)} deps")

        mods_dict[name] = {
            "name": name,
            "enabled": True,
            "dependencies": deps,
            "references": [],  # –ø–æ–∫–∞ –ø—É—Å—Ç–æ
        }

    if not found_any:
        print("[DEBUG] –í –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö –Ω–µ—Ç .mod —Ñ–∞–π–ª–æ–≤!")

    data["mods"] = list(mods_dict.values())
    with open(all_json, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    print(f"[DEBUG] –ó–∞–ø–∏—Å–∞–Ω–æ {len(data['mods'])} –º–æ–¥(–æ–≤) –≤ {all_json}")


if __name__ == "__main__":
    main()